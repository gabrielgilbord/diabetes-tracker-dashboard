import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:android_intent_plus/android_intent.dart';
import 'package:device_info_plus/device_info_plus.dart';

class BatteryOptimizationService {
  static const String _hasShownBatteryDialog = 'has_shown_battery_dialog';
  static const String _hasShownOptimizationGuide = 'has_shown_optimization_guide';

  // Verificar si es Android
  static Future<bool> isAndroid() async {
    if (kIsWeb) {
      return false; // No es Android si estamos en web
    }
    
    try {
      final deviceInfo = DeviceInfoPlugin();
      final androidInfo = await deviceInfo.androidInfo;
      return androidInfo.brand.isNotEmpty; // Use any property to check if it's Android
    } catch (e) {
      print("Error verificando si es Android: $e");
      return false;
    }
  }

  // Verificar si ya se mostr√≥ el di√°logo de bater√≠a
  static Future<bool> hasShownBatteryDialog() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_hasShownBatteryDialog) ?? false;
  }

  // Marcar que se mostr√≥ el di√°logo
  static Future<void> markBatteryDialogShown() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_hasShownBatteryDialog, true);
  }

  // Verificar si ya se mostr√≥ la gu√≠a de optimizaci√≥n
  static Future<bool> hasShownOptimizationGuide() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool(_hasShownOptimizationGuide) ?? false;
  }

  // Marcar que se mostr√≥ la gu√≠a
  static Future<void> markOptimizationGuideShown() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool(_hasShownOptimizationGuide, true);
  }

  // Mostrar di√°logo de configuraci√≥n de bater√≠a
  static Future<void> showBatteryOptimizationDialog(BuildContext context) async {
    if (!await isAndroid()) return;
    
    final hasShown = await hasShownBatteryDialog();
    if (hasShown) return;

    await markBatteryDialogShown();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(Icons.battery_charging_full, color: Colors.orange, size: 28),
              SizedBox(width: 8),
              Text('Optimizaci√≥n de Bater√≠a'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Para que la recogida autom√°tica de datos funcione correctamente con el m√≥vil bloqueado, necesitas desactivar la optimizaci√≥n de bater√≠a para esta app.',
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 16),
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '¬øPor qu√© es necesario?',
                      style: TextStyle(fontWeight: FontWeight.bold, color: Colors.orange),
                    ),
                    SizedBox(height: 8),
                    Text(
                      '‚Ä¢ La optimizaci√≥n de bater√≠a puede detener la app en segundo plano\n'
                      '‚Ä¢ Sin esto, la recogida autom√°tica de datos se interrumpir√°\n'
                      '‚Ä¢ Es necesario para el funcionamiento completo de la app',
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('M√°s tarde'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _openBatteryOptimizationSettings(context);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
              ),
              child: Text('Configurar ahora'),
            ),
          ],
        );
      },
    );
  }

  // Abrir configuraci√≥n de optimizaci√≥n de bater√≠a
  static Future<void> _openBatteryOptimizationSettings(BuildContext context) async {
    if (kIsWeb) {
      _showManualGuideDialog(context);
      return;
    }
    
    try {
      final intent = AndroidIntent(
        action: 'android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS',
        data: 'package:com.example.diabetes_tracker',
      );
      await intent.launch();
    } catch (e) {
      // Fallback: abrir configuraci√≥n general de bater√≠a
      try {
        final intent = AndroidIntent(
          action: 'android.settings.BATTERY_SAVER_SETTINGS',
        );
        await intent.launch();
      } catch (e) {
        _showManualGuideDialog(context);
      }
    }
  }

  // Mostrar gu√≠a manual si no se puede abrir autom√°ticamente
  static void _showManualGuideDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(Icons.help_outline, color: Colors.blue, size: 28),
              SizedBox(width: 8),
              Text('Configuraci√≥n Manual'),
            ],
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Sigue estos pasos para desactivar la optimizaci√≥n de bater√≠a:',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 16),
                _buildStep(1, 'Ajustes > Bater√≠a'),
                _buildStep(2, 'Optimizaci√≥n de bater√≠a'),
                _buildStep(3, 'Busca "Diabetes Tracker"'),
                _buildStep(4, 'Selecciona "No optimizar"'),
                SizedBox(height: 16),
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.withOpacity(0.3)),
                  ),
                  child: Text(
                    'üí° La ubicaci√≥n exacta puede variar seg√∫n tu dispositivo y versi√≥n de Android.',
                    style: TextStyle(fontSize: 14, fontStyle: FontStyle.italic),
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Entendido'),
            ),
          ],
        );
      },
    );
  }

  static Widget _buildStep(int number, String description) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: 24,
            height: 24,
            decoration: BoxDecoration(
              color: Colors.blue,
              borderRadius: BorderRadius.circular(12),
            ),
            child: Center(
              child: Text(
                '$number',
                style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 12),
              ),
            ),
          ),
          SizedBox(width: 12),
          Expanded(
            child: Text(
              description,
              style: TextStyle(fontSize: 16),
            ),
          ),
        ],
      ),
    );
  }

  // Mostrar recordatorio si la optimizaci√≥n no est√° configurada
  static Future<void> showOptimizationReminder(BuildContext context) async {
    if (!await isAndroid()) return;
    
    final hasShown = await hasShownOptimizationGuide();
    if (hasShown) return;

    await markOptimizationGuideShown();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(Icons.warning_amber, color: Colors.orange, size: 28),
              SizedBox(width: 8),
              Text('Configuraci√≥n Recomendada'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Para una experiencia √≥ptima con la recogida autom√°tica de datos, te recomendamos configurar la optimizaci√≥n de bater√≠a.',
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 16),
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.green.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.green.withOpacity(0.3)),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Beneficios:',
                      style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green),
                    ),
                    SizedBox(height: 8),
                    Text(
                      '‚úÖ Recogida continua de datos\n'
                      '‚úÖ Funciona con el m√≥vil bloqueado\n'
                      '‚úÖ Sincronizaci√≥n autom√°tica\n'
                      '‚úÖ Mejor rendimiento general',
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Omitir'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _openBatteryOptimizationSettings(context);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
              ),
              child: Text('Configurar'),
            ),
          ],
        );
      },
    );
  }
} 